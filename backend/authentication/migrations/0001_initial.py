# Generated by Django 4.2.16 on 2025-09-28 02:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="El número de teléfono debe estar en formato: '+999999999'. Hasta 15 dígitos permitidos.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Número de teléfono')),
                ('company_name', models.CharField(blank=True, max_length=200, verbose_name='Nombre de la empresa')),
                ('company_type', models.CharField(blank=True, max_length=100, verbose_name='Tipo de empresa')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Cargo/Posición')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', verbose_name='Foto de perfil')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Usuario verificado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Correo electrónico')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_address', models.TextField(blank=True, verbose_name='Dirección de la empresa')),
                ('company_city', models.CharField(blank=True, max_length=100, verbose_name='Ciudad')),
                ('company_state', models.CharField(blank=True, max_length=100, verbose_name='Estado/Provincia')),
                ('company_country', models.CharField(blank=True, max_length=100, verbose_name='País')),
                ('company_postal_code', models.CharField(blank=True, max_length=20, verbose_name='Código postal')),
                ('tax_id', models.CharField(blank=True, max_length=50, verbose_name='ID fiscal/RUC/NIT')),
                ('website', models.URLField(blank=True, verbose_name='Sitio web')),
                ('timezone', models.CharField(default='America/Lima', max_length=50, verbose_name='Zona horaria')),
                ('language', models.CharField(default='es', max_length=10, verbose_name='Idioma')),
                ('currency', models.CharField(default='PEN', max_length=10, verbose_name='Moneda')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notificaciones por email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Notificaciones por SMS')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil de usuario',
                'verbose_name_plural': 'Perfiles de usuario',
            },
        ),
    ]
